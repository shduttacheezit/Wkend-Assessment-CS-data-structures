Runtime

1. When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?

--The workload is the length of a list to loop through while looking for an elephant, and in this case the "list" would be the number of animal crackers in the box. 

2. Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:
O(log n)
O(n2)
O(n log n)
O(n)
O(2n)
O(1)
(Hint: to write exponents in a text file, use a carrot, like so: n^2 or 2^n.)

--O(1) < O(log n) < O(n) < O(n log n) < O(n^2) < O(2^n)

Stacks and Queues

1. In the following cases, would a stack or queue be a more appropriate data structure?
    a) The process of loading and unloading pallets onto a flatbed truck 
        --A Stack
    b) Putting bottle caps on bottles of beer as they roll down an assembly line
        --A Queue
    c) Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
        --A Stack
2. Describe two more situations where a queue would be an appropriate data structure.
    --#1 When waiting in line at a cafe for coffee - the people at the end of the line are served last.
    --#2 When placed on the waiting list for an event, those who are placed on list first, get tickets first.
3. Describe two more situations where a stack would be an appropriate data structure.
    --#1 When you remove cans of soda from of a box - you start empyting it out from the top, taking cans out that were packed last.
    --#2 When you take your layers of clothes off - last layer in is the first layer taken off.

Linked Lists

1. Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)
--The nodes are what the first 3 arrows are pointing to, including the 2nd, 3rd, and 4th set of boxes. 
--The data for each node is what is in quotations in the first box of the mentioned set of boxes (node) - giving the information the node contains, "apple", "berry", and "cherry" for the respective 3 nodes. 
--The head is next to the LLIST box because it is the LinkedList Class's mandatory attribute. 
--There is no tail attribute for LLIST in the diagram. If there were, it would be in a box directly next to the head in the same row as LLIST. 

2. What’s the difference between doubly- and singly-linked lists?
--A doubly linked list has nodes with 2 arrows pointing to it and 2 arrows pointing away from it because it has an additional attribute "prev" that points to the previous node, whereas singly-linked lists only have 1 arrow for the attribute "next" pointing to the next node.  
3. Why is it faster to append to a linked list if we keep track of the tail as an attribute?
--It is faster to append to a linked list with a tail attribute because then we know exactly where the end of the list is. Without the tail attribute, you would have to traverse the list to add a node. 

Trees

1. Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? (Assume nodes are enqueued in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
--food -> Italian -> Indian -> Mexican -> lasagna -> pizza -> tikka masala -> saag -> burritos
2. Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? (Assume nodes are pushed in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
--food-> Mexican -> enchiladas -> tacos -> burritos -> Indian -> saag -> tikka masala -> Italian -> pizza -> sicilian -> New York-style -> Chicago-style
3. How is a binary search tree different from other trees?
--Binary search tree is different because it has a rule for arrangement for the left and right child, so you know which way to go from the parent. This divides your runtime by half. 
